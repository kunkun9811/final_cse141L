000110010   # CL R2         // R2 = 0
000110011   # CL R3         // R3 = 0
000110100   # CL R4         // R4 = 0
000110001   # CL R1         // R1 = 0

// LOOP:
100000001   # SET #1        // R1 = 1
010010001   # ADD R2, R1    // R2 = R2 + R1
100000001   # SET #1        // R1 = 1
010011001   # ADD R3, R1    // R3 = R3 + R1
101100100   # SET #100      // R1 = 100
000111011   # SUB R3        // R1 = R1 - R3

// branch #1 set up code - jump to halt
000110111   # CL R7         // R7 = 0
010111001   # ADD R7, R1    // R7 = R1  save r1 value
100011100   # SET #28       // R1 = address where to jump to (jump to halt)
000110000   # CL R0         // R0 = 0
010000001   # ADD R0, R1    // R0 = address where to jump to (jump to halt)
000110001   # CL R1         // R1 = 0
010001111   # ADD R1, R7    // R1 = R7  restore R1 value before all these set up code
// end

000011000   # BEQZ R0       // branch instruction BEQZ. If done 100 iterations, stop the loop

100000000   # SET #0        // R1 = 0

// branch #2 set up code - jump back to loop
000110111   # CL R7         // CL R7
010111001   # ADD R7, R1
100000101   # SET #5
000110000   # CL R0
010000001   # ADD R0, R1
000110001   # CL R1
010001111   # ADD R1, R7
// end

000011000   # BEQZ R0       // branch instruction. If not 100 iterations, back to top of the loop

// STOP:
000000000   # HALT